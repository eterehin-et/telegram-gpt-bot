import os
import time
import telebot
import openai
from collections import defaultdict, deque

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    raise RuntimeError("‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_TOKEN –∏/–∏–ª–∏ OPENAI_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_KEY

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_contexts = defaultdict(lambda: deque(maxlen=6))  
# (6 —Å–æ–æ–±—â–µ–Ω–∏–π = 3 —Ä–µ–ø–ª–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + 3 –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏)

def ask_openai(user_id, new_message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ OpenAI"""
    history = list(user_contexts[user_id])
    history.append({"role": "user", "content": new_message})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=history,
            max_tokens=800,
        )
        reply = response.choices[0].message["content"].strip()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_contexts[user_id].append({"role": "assistant", "content": reply})
        return reply
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ OpenAI] {e}")
        return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT."

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å ChatGPT. –ü–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n"
        "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–µ–ø–ª–∏–∫–∏, —á—Ç–æ–±—ã —Ä–∞–∑–≥–æ–≤–æ—Ä –±—ã–ª —Å–≤—è–∑–Ω—ã–º."
    )

@bot.message_handler(commands=['reset'])
def reset_context(message):
    """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    user_contexts.pop(message.chat.id, None)
    bot.reply_to(message, "üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text.strip()

    print(f"[{message.from_user.username}] {text}")

    reply = ask_openai(user_id, text)
    try:
        bot.reply_to(message, reply)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", e)

if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ polling:", e)
            time.sleep(5)
